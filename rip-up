#!/usr/bin/env bash

# Update Rust, pull changes from ripgrep upstream; rebuild, if necessary
# Tested with Bash 4.4 and Rust nightly

################################################################################

# Print separator if a TTY is not connected
[[ ! -t 1 ]] \
    && printf '\n===\n'

# # Trace live execution
# set -o xtrace

# Calm down a bit
set +o errexit

# Source Bash utilities, if possible
declare script_dir
if ! script_dir="$(dirname -- "$(readlink -e -- "${0}")")"; then
    printf '[FATAL] Could not navigate to script directory' 1>&2
    exit 1
fi
declare -r script_dir
declare -rx bash_utils="${script_dir}/bash_utils/bash_utils.sh"
if [[ ! -f "${bash_utils}" ]]; then
    printf '[FATAL] Could not find %s\n' "${bash_utils}" 1>&2
    exit 1
fi
# shellcheck source=./bash_utils/bash_utils.sh
if ! . "${bash_utils}"; then
    printf '[FATAL] Could not source %s\n' "${bash_utils}" 1>&2
    exit 1
fi

################################################################################

# Print help message
usage() {
    local -a order
    local -r help_fmt="${sqo}${b}-h${n}${sqc}"
    local -r help_msg="${d}Print this help message${n}"
    order+=( "${help_fmt}" )
    local -r verb_lvls="0${d}|${n}1${d}|${n}${u}2${n}${d}|${n}3${sqc}"
    local -r verb_fmt="${sqo}${b}-v${n} ${verb_lvls}"
    local -r verb_msg="${d}Control output verbosity${n}"
    order+=( "${verb_fmt}" )
    local -r force_fmt="${sqo}${b}-f${n}${sqc}"
    local -r force_msg="${d}Force ripgrep build${n}"
    order+=( "${force_fmt}" )
    local -r src_fmt="${sqo}${b}-d${n} ${i}git_dir${n}${sqc}"
    local -r src_msg="${d}Specify path to Git local directory${n}"
    order+=( "${src_fmt}" )
    local -r upstream_fmt="${sqo}${b}-u${n} ${i}upstream${n}${sqc}"
    local -r upstream_msg="${d}Specify Git upstream, e.g. 'origin/master'${n}"
    order+=( "${upstream_fmt}" )
    local -r nostrip_fmt="${sqo}${b}-p${n}${sqc}"
    local -r nostrip_msg="${d}Do not strip executable post build step${n}"
    order+=( "${nostrip_fmt}" )
    local -r order

    local -Ar prog_params=(
        ["${help_fmt}"]="${help_msg}"
        ["${verb_fmt}"]="${verb_msg}"
        ["${force_fmt}"]="${force_msg}"
        ["${src_fmt}"]="${src_msg}"
        ["${upstream_fmt}"]="${upstream_msg}"
        ["${nostrip_fmt}"]="${nostrip_msg}"
    )

    printf '%s\n\n' \
        "${d}Update toolchain and build ${b}ripgrep${n}${d} from source${n}"
    printf '%s\n\t%s\n' \
        "${d}Usage:${n}" \
        "${b}$(basename -- "${0}")${n}"

    local text=''
    local key=''
    for idx in "${!order[@]}"; do
        key="${order["${idx}"]}"
        text="${text}${key}:${prog_params[${key}]}"$'\n'
    done
    local -r text

    reset_fmt
    printf '%s' "${text}" \
        | column -t -s ':' \
        | sed -u 's/^/\t\t/'
    reset_fmt
}

# Update Rust, if possible
rust_update() {
    log 'INFO' 'Checking for updates to Rust'

    # Duplicate stdout
    exec {dupout}>&1

    # Copy rustup output to stdout before piping to grep
    unbuffer rustup update 2>&1 \
        | tee "/dev/fd/${dupout}" \
        | grep -q -F 'updated'

    # Save pipe status codes
    local -ar pipe_status=( "${PIPESTATUS[@]}" )

    # Close duplicated file descriptor
    exec {dupout}>&-

    # Return failure if any command in the pipeline failed
    local -i code=1
    for idx in "${!pipe_status[@]}"; do
        code="${pipe_status[idx]}"
        if (( "${code}" != 0 )); then
            log \
                'DEBUG' \
                "rustup pipeline command #$(( idx + 1 )) exited with ${code}"
            return "${code}"
        fi
    done

    # Return success by default
    return 0
}

# List ripgrep executable file information
show_exe() { # Parameters: exe_path
    local -r exe_path="${1:-}"
    unbuffer ls -lhF --color=always "${exe_path}" \
        || { log 'FATAL' "Could not list ${exe_path} on filesystem"; exit 1; }
}

# Pull fresh changes from ripgrep upstream, rebuild, and run tests
ripgrep_build() { # Parameters: exe_path, strip_bin
    local -r exe_path="${1:-}"

    log 'INFO' 'Building ripgrep'
    env RUSTFLAGS='-C target-cpu=native' \
        cargo build --release --features 'simd-accel avx-accel' \
            || { log 'FATAL' 'Cargo build failed'; exit 1; }

    log 'INFO' 'Testing new build'
    cargo test --all \
        || { log 'FATAL' 'Cargo test failed'; exit 1; }

    log 'INFO' 'Build successful' 'force'

    local -r strip_bin="${2:-strip}"
    [[ "${strip_bin}" == 'strip' ]] \
        && {
            log 'INFO' 'Stripping executable'

            log 'INFO' 'Before:'
            show_exe "${exe_path}"

            # Minimize ripgrep executable
            # TODO: Fix hackaround for macOS
            strip -p -s "${exe_path}" 2>/dev/null \
                || strip "${exe_path}" \
                    || log 'ERROR' "Could not strip ${exe_path}"

            # Ensure ripgrep binary is executable
            chmod 0755 "${exe_path}" \
                || log 'ERROR' "Could not change permissions for ${exe_path}"

            log 'INFO' 'After:'
        }

    show_exe "${exe_path}"
}

# Pull and rebase from upstream
repo_pull_rebase() { # Parameters: upstream
    log 'INFO' 'Pulling updates from ripgrep upstream'

    # Change 'upstream/branch' to 'upstream branch'
    #     and tokenize into array elements
    local -r upstream="${1:-origin/master}"
    local -a upstream_split
    # shellcheck disable=SC2086
    read -r -a upstream_split <<< ${upstream/\// }
    local -r upstream_split

    git pull "${upstream_split[@]}" --rebase \
        || { log 'FATAL' 'Git pull failed'; exit 1; }
}

# Check if upstream has changes
repo_check() { # Parameters: upstream
    log 'INFO' 'Checking with ripgrep remote for changes'

    # Get ripgrep remote status
    (( verbosity > 2 )) \
        && git remote update

    local -r git_current_branch='@{0}'
    local git_upstream="${1:-@{u\}}"
    local git_local=''
    git_local="$(git rev-parse "${git_current_branch}")"
    local -r git_local
    local git_remote=''
    git_remote="$(git rev-parse "${git_upstream}")"
    local -r git_remote
    local git_base=''
    git_base="$(git merge-base \
        "${git_current_branch}" "${git_upstream}" \
    )"
    local -r git_base

    # Largely redundant, but just in case
    [[ "${git_upstream}" == '@{u}' ]] \
        && git_upstream="$(repo_resolve_upstream "${git_upstream}")"
    local -r git_upstream

    # Check Git local against upstream
    if [[ "${git_local}" == "${git_remote}" ]]; then
        log 'INFO' 'Git local is same as remote'
        return 1
    elif [[ "${git_local}" == "${git_base}" ]]; then
        log 'INFO' 'Git local is behind remote'
        repo_pull_rebase "${git_upstream}" \
            && return 0
    elif [[ "${git_remote}" == "${git_base}" ]]; then
        log 'WARN' 'Git local is ahead of remote' 'force'

        # Leave choice with user
        local want_rebuild='Maybe'
        local -ar rebuild_opts=( 'Yes' 'No' )
        printf '\nRebuild?\n'
        select want_rebuild in "${rebuild_opts[@]}"; do
            case "${want_rebuild}" in
                "${rebuild_opts[0]}")
                    repo_pull_rebase "${git_upstream}" \
                        && return 0
                    ;;
                "${rebuild_opts[1]}") return 1 ;;
            esac
        done
    else
        log 'ABORT' 'Git histories have diverged'
        exit 1
    fi

    return 1
}

# Resolve upstream tracking name
repo_resolve_upstream() { # Parameters: upstream
    local upstream="${1:-@{u\}}"
    [[ "${upstream}" == '@{u}' ]] \
        && upstream="$( \
                git for-each-ref --format='%(upstream:short)' \
                    "$(git symbolic-ref -q HEAD)"
            )"
    local -r upstream

    printf '%s' "${upstream}"
}

################################################################################

# Entry point
main() { # Parameters: [flags]
    # Set defaults
    local git_dir="${HOME}/git/ripgrep"
    local upstream='@{u}'
    local force_build='reasons'
    local strip_bin='strip'
    declare -ix verbosity=2

    # Process flag arguments first in case help is sought
    local flag=''
    while getopts 'hv:fd:u:p' flag; do
        case "${flag}" in
            h)
                usage
                exit 0
                ;;
            v)
                verbosity="${OPTARG}"
                if [[ ! "${verbosity}" =~ ^[0-9]$ ]]; then
                    log 'FATAL' "Invalid verbosity level: ${verbosity}"
                    usage
                    exit 1
                fi
                ;;
            f)
                force_build='force'
                ;;
            d)
                git_dir="${OPTARG}"
                local -r git_dir
                ;;
            u)
                upstream="${OPTARG}"
                ;;
            p)
                strip_bin='keep'
                local -r strip_bin
                ;;
            *)
                log 'FATAL' "Invalid flag: ${flag}"
                usage
                exit 1
                ;;
        esac
    done

    # Move past flag arguments
    shift "$(( OPTIND - 1 ))"

    # Fail as early as possible
    log 'DEBUG' 'Checking prerequisites'

    # Bash version check
    if (( "${#BASH_VERSINFO[@]}" <= 0 )) \
        || (( "${BASH_VERSINFO[0]}" < 4 )) \
        || (( "${BASH_VERSINFO[0]}" == 4 && "${BASH_VERSINFO[1]}" < 4 )); then
            log 'FATAL' 'Minimum Bash version 4.4 required'
            exit 1
    fi

    # Check for availability of required commands
    require 'column' 'sed' 'tee' 'env' 'basename' 'md5sum' 'chmod' \
        'unbuffer' 'rustup' 'grep' 'git' 'cargo' 'strip' \
            && log 'DEBUG' 'Requirements satisfied'

    # Enter specified directory
    cd "${git_dir}" \
        || { log 'FATAL' "Could not cd to ${git_dir}"; exit 1; }

    # Navigate to ripgrep Git root directory
    local git_dir_top
    git_dir_top="$(git rev-parse --show-toplevel)"
    local -r git_dir_top

    if [[ "$(basename -- "${git_dir_top}")" != 'ripgrep' ]]; then
        log 'FATAL' "${git_dir} is not within local ripgrep Git tree"
        exit 1
    fi
    cd "${git_dir_top}" \
        || { log 'ERROR' "Could not cd to ${git_dir_top}"; exit 1; }
    local -r exe_path="${git_dir_top}/target/release/rg"

    log 'DEBUG' 'Checking for existing ripgrep executable'

    # Print information about reipgrep executable
    exe_version() {
        # Compute ripgrep executable checksum
        if ! md5sum -b "${exe_path}"; then
            log 'FATAL' 'Could not compute checksum for executable'
            exit 1
        fi

        # Show build information from executable
        if ! "${exe_path}" --version; then
            log 'FATAL' 'Could not query executable for version'
            exit 1
        fi
    }

    # Force building if ripgrep executable does not exist in default location
    if [[ ! -x "${exe_path}" ]]; then
        log 'DEBUG' "${exe_path} is not a riprep executable"
        force_build='force'
    else
        log 'INFO' 'Existing executable'
        exe_version "${exe_path}"
    fi

    local -i reasons=0

    if [[ "${force_build}" == 'force' ]]; then
        log 'INFO' 'Enabling mandatory build step'
        (( ++reasons ))
    fi

    # Try updating Rust
    rust_update \
        && (( ++reasons ))

    # Get upstream tracking name
    [[ "${upstream}" == '@{u}' ]] \
        && upstream="$(repo_resolve_upstream "${upstream}")"
    local -r upstream

    # Try pulling from ripgrep upstream, if required
    [[ "${force_build}" != 'force' ]] \
        && repo_check "${upstream}" \
            && (( ++reasons ))
    local -r reasons

    # Try rebuilding ripgrep
    if (( reasons > 0 )); then
        ripgrep_build "${exe_path}" "${strip_bin}"

        log 'INFO' 'Built executable'
        exe_version "${exe_path}"
    else
        log 'INFO' 'ripgrep build not required' 'force'
    fi
}

main "${@}"
